<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on RevolC.Blog</title><link>https://revolc.blog/tags/api/</link><description>Recent content in API on RevolC.Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://revolc.blog/tags/api/index.xml" rel="self" type="application/rss+xml"/><item><title>試著讓初學者理解 API</title><link>https://revolc.blog/posts/understanding-api-for-beginner/</link><pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate><guid>https://revolc.blog/posts/understanding-api-for-beginner/</guid><description>&lt;h2 id="基本解釋">基本解釋
&lt;/h2>&lt;p>API（Application Programming Interface），中文翻為應用程式介面，用一句話來解釋的話，就是：兩個應用程式（電腦）接觸時所要依照的規範。&lt;/p>
&lt;p>再用白話一點的方式來解釋，就是：「&lt;strong>程式跟程式之間的面交規範。&lt;/strong>」&lt;/p>
&lt;p>以面交買東西為例，假如今天我要跟某個店家面交買東西，那以下可能是他會事先定好的注意事項：&lt;/p>
&lt;ol>
&lt;li>你在哪個地方可以跟我碰面。&lt;/li>
&lt;li>你要給我什麼（例如錢、身分證件）。&lt;/li>
&lt;li>這樣我就會給你什麼。&lt;/li>
&lt;/ol>
&lt;p>假如我今天要預約要買鋼琴，那他會事先跟我說：&lt;/p>
&lt;ol>
&lt;li>你可以在臺中的某個街道跟我碰面。&lt;/li>
&lt;li>你要給我事先約好的鋼琴金額、身分證件。&lt;/li>
&lt;li>我會給你鋼琴。&lt;/li>
&lt;/ol>
&lt;p>現在把鋼琴換成是某個「電腦資料」，比如說 NBA 的球員數據好了。
如果我今天想要找 Nikola Jokic 去年整年的數據，那我可能就會去找有提供數據的店家，他也已經定好面交規範：&lt;/p>
&lt;ol>
&lt;li>你可以在某個秘密網址找到我。&lt;/li>
&lt;li>你要給我你想要哪一年的什麼數據。&lt;/li>
&lt;li>我就會給你球員的數據。&lt;/li>
&lt;/ol>
&lt;p>這個東西翻成程式的語言就是：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>URL&lt;/strong>：你可以在某個秘密「網址」找到我。&lt;/li>
&lt;li>&lt;strong>Request&lt;/strong>：我需要你給我「要求」的東西。&lt;/li>
&lt;li>&lt;strong>Response&lt;/strong>：我會「回應」給你相關的資料。&lt;/li>
&lt;/ol>
&lt;h2 id="api-的用法">API 的用法
&lt;/h2>&lt;p>以下我會舉例三種方法：&lt;code>GET, POST, PUT&lt;/code>。&lt;/p>
&lt;h3 id="get">GET
&lt;/h3>&lt;p>字面意思，&lt;code>GET&lt;/code> 指的就是「拿取」資料。&lt;/p>
&lt;p>以在 Instagram 貼文為例。如果今天我要看某個人的某篇文章，於是我點進了這個文章頁面。這時 Instagram 的前端工程師就要跟後端去拿資料，通常就會用 &lt;code>GET&lt;/code>。&lt;/p>
&lt;p>他們之間所定的 API 規則可能長這樣：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">URL: 127.0.0.1/articles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Request: article_id, user_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Response: time, content, likes, comments
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>我們可以在 &lt;code>127.0.0.1/articles&lt;/code> 這個網址碰面。&lt;/li>
&lt;li>你要給我的東西是：
&lt;ul>
&lt;li>你想要看哪篇貼文（&lt;code>article_id&lt;/code>）&lt;/li>
&lt;li>想要看這篇貼文的是誰（&lt;code>user_id&lt;/code>）（如果發文的人跟使用者不是好友，可能會被擋住。）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我會回傳給你：
&lt;ul>
&lt;li>發文時間（&lt;code>time&lt;/code>）&lt;/li>
&lt;li>文章內容（&lt;code>content&lt;/code>）&lt;/li>
&lt;li>有誰按讚（&lt;code>likes&lt;/code>）&lt;/li>
&lt;li>留言有哪些（&lt;code>comments&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="post">POST
&lt;/h3>&lt;p>&lt;code>POST&lt;/code> 可以想成是 PO 文，用學術一點的解釋就是，使用者在資料庫「創建」一筆新的資料。&lt;/p>
&lt;p>以使用者要發一篇新的文為例，API 規格可能長這樣：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">URL: 127.0.0.1/articles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Request: user_id, content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Response: article_id, &amp;#34;發文成功&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>雖然這邊的網址跟 &lt;code>GET&lt;/code> 一樣，但是因為一個是 &lt;code>GET&lt;/code>，一個是 &lt;code>POST&lt;/code>。用法不同，所以可以同時存在，不會衝突。&lt;/p>
&lt;ul>
&lt;li>我們可以在 &lt;code>127.0.0.1/articles&lt;/code> 這個網址碰面。&lt;/li>
&lt;li>你要給我的東西：
&lt;ul>
&lt;li>發文的人是誰（&lt;code>user_id&lt;/code>）&lt;/li>
&lt;li>文章內容（&lt;code>content&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我會回傳給你：
&lt;ul>
&lt;li>這篇文章的在資料庫是編號多少（&lt;code>article_id&lt;/code>）。&lt;/li>
&lt;li>「發文成功」（&lt;code>message&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="put">PUT
&lt;/h3>&lt;p>可以 &lt;code>PUT&lt;/code> 想成是 Edit（編輯）。&lt;/p>
&lt;p>假設今天使用者要編輯貼文，API 規格可能長這樣：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">URL: 127.0.0.1/articles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Request: article_id, content, user_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Response: &amp;#34;發文成功&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>我們可以在 &lt;code>127.0.0.1/articles&lt;/code> 這個網址碰面。&lt;/li>
&lt;li>你要給我的東西：
&lt;ul>
&lt;li>這是哪篇文章（&lt;code>article_id&lt;/code>）&lt;/li>
&lt;li>新的文章內容（&lt;code>content&lt;/code>）&lt;/li>
&lt;li>發文的人是誰（&lt;code>user_id&lt;/code>）、&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我會回傳給你：「發文成功」（&lt;code>message&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>你可能有注意到這三個 API 的 URL 都一樣，這樣會不會打架？&lt;br>
不會，因為是程式會把 &lt;code>GET, POST, PUT&lt;/code> 這些動作看成是不同的。&lt;/p>&lt;/blockquote>
&lt;h3 id="一些工作用語">一些工作用語
&lt;/h3>&lt;p>在公司裡面，通常大家會用的詞語是「打」。我可以稍微舉例一些詞句：&lt;/p>
&lt;ul>
&lt;li>我按下這個按鈕的時候需要拿到資料，這時候應該要「打」這一隻 API。&lt;/li>
&lt;li>這一隻 API 漏了什麼參數，我需要你給我，可以修改一下嗎？&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="總結">總結
&lt;/h2>&lt;p>以上是關於 API 的白話分享，希望這篇文章對你有幫助！&lt;/p>
&lt;p>工作之前我也是花了好多的時間搞懂到底什麼是 API，不過其實工作之後會覺得，這根本不是一個「學問」，比較像是一個習以為常的用品。或許這也是為什麼，當有人問一個工程師說：「什麼是 API？」對方也會一時之間不知道怎麼回答。&lt;/p></description></item></channel></rss>